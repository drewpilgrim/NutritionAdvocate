/* global Vue, VueRouter, axios */

var HomePage = {
  template: "#home-page",
  data: function() {
    return {
      message: "Welcome to Vue.js!",
      currentUser: null
    };
  },
  created: function() {
  },
  methods: {},
  computed: {}
};

var AboutPage = {
  template: "#about-page",
  data: function() {
    return {
      message: "Welcome to Vue.js!",
    };
  },
  created: function() {
  },
  methods: {},
  computed: {}
};

var ContactPage = {
  template: "#contact-page",
  data: function() {
    return {
      message: "Welcome to Vue.js!",
    };
  },
  created: function() {
  },
  methods: {},
  computed: {}
};

var ProfilePage = {
  template: "#profile-page",
  data: function() {
    return {
      currentUser: null,
      errors: []
    };
  },
  created: function() {
      axios
        .get("/users")
        .then(function(response) {
          console.log(response.data);
          this.currentUser = response.data.current_user;
        }.bind(this)
        ).catch(
          function(error) {
            this.errors = error.response.data.errors;
          }.bind(this)
        );
    

  },
  methods: {
    updateUser: function(){
      axios
        .get("/users")
        .then(function(response) {
          console.log(response.data);
          this.currentUser = response.data.current_user;
        }.bind(this)
        ).catch(
          function(error) {
            this.errors = error.response.data.errors;
          }.bind(this)
        );
    }
  },
  computed: {}
};

var RequirementPage = {
  template: "#requirement-page",
  data: function() {
    return {
      currentUser: {username: "Loading"},
      allergy: "Dairy",
      diet: "Vegetarian",
      mealType: "Main Dishes",
      requirementList: [],
      reqID: 1,
      errors: []
    };
  },
  created: function() {
      this.updateUser();
      axios.get("/requirements")
        .then(function(response) {
          console.log(response.data);
          this.requirementList = response.data;
        }.bind(this)
        ).catch(
          function(error) {
            this.errors = error.response.data.errors;
          }.bind(this)
        );
    

  },
  methods: {
    updateUser: function(){
      axios
        .get("/users")
        .then(function(response) {
          console.log(response.data);
          this.currentUser = response.data.current_user;
        }.bind(this)
        ).catch(
          function(error) {
            this.errors = error.response.data.errors;
          }.bind(this)
        );
    },
    add_requirement: function(id) {
      console.log("ID: "+id);
      var params = {
        requirement_id: id,
        user_id: this.currentUser.id
      };
      axios
        .post("/user_requirements", params)
        .then(function(response) {
          console.log("Requirement Added");
        })
        .catch(
          function(error) {
            this.errors = error.response.data.errors;
          }.bind(this)
        );

        this.updateUser();
    },
    delete_requirement: function(id){

    }

  },
  computed: {}
};


var PastMealPage = {
  template: "#past-meal-page",
  data: function() {
    return {
      currentUser: {username: "Loading"},
      mealName: "",
      k: 0.0,
      na: 0.0,
      chole: 0.0,
      fatrn: 0.0,
      fasat: 0.0,
      chocdf: 0.0,
      fibtg: 0.0,
      procnt: 0.0,
      vitc: 0.0,
      ca: 0.0,
      fe: 0.0,
      sugar: 0.0,
      enerc_kcal: 0.0,
      fat: 0.0,
      vita_iu: 0.0,
      errors: []
    };
  },
  created: function() {
      this.updateUser();
  },
  methods: {
    updateUser: function(){
      axios
        .get("/users")
        .then(function(response) {
          console.log(response.data);
          this.currentUser = response.data.current_user;
        }.bind(this)
        ).catch(
          function(error) {
            this.errors = error.response.data.errors;
          }.bind(this)
        );
    },
    createNewPastMeal: function(){
      var params = {k: this.k, na: this.na, chole: this.chole,  fatrn: this.fatrn, fasat: this.fasat, chocdf: this.chocdf, fibtg: this.fibtg, pronct: this.pronct, vitc: this.vitc, ca: this.ca, fe: this.fe, sugar: this.sugar, enerc_kcal: this.enerc_kcal, fat: this.fat, vita_iu: this.vita_iu, name: this.mealName};

        axios
        .post("/past_meals", params)
        .then(function(response) {
          axios.get("/past_meals")
            .then(function(response) {
              console.log(response.data);
            }.bind(this)
            ).catch(
              function(error) {
                this.errors = error.response.data.errors;
              }.bind(this)
            );

        })
        .catch(
          function(error) {
            this.errors = error.response.data.errors;
          }.bind(this)
        );
        this.updateUser();
    },
    delete_past_meal: function(id){
        params = {
          id: id
        }
        axios.delete("http://localhost:3000/past_meal", params).then(function(response){


        }.bind(this)).catch(function(error){
         console.log(error);
         this.errors = error.response.data.errors; 
        });
      }
  },
  computed: {}
};

var RecipePage = {
  template: "#recipe-page",
  data: function() {
    return {
      currentUser: {username: "Loading", recipes: []},
      mealName: "",
      recipes: {},
      pastMeals: [],
      nutritionalData: {
       
      },
      userNData: {
        k: 0.0,
        na: 0.0,
        chole: 0.0,
        fatrn: 0.0,
        fasat: 0.0,
        chocdf: 0.0,
        fibtg: 0.0,
        procnt: 0.0,
        vitc: 0.0,
        ca: 0.0,
        fe: 0.0,
        sugar: 0.0,
        enerc_kcal: 0.0,
        fat: 0.0,
        vita_iu: 0.0,
      },
      errors: []
    };
  },
  created: function() {
        axios
        .get("/users")
        .then(function(response) {
          console.log(response.data);
          this.currentUser = response.data.current_user;
        }.bind(this)
        ).catch(
          function(error) {
            this.errors = error.response.data.errors;
          }.bind(this)
        );

      //Get Nutrtional Data
      axios
        .get("/nutritional_data")
        .then(function(response) {
          console.log(response.data);
          //Age (Todo) and Gender selection
          if(this.currentUser.gender === "m"){
            this.nutritionalData = response.data[0];
          }else{
            this.nutritionalData = response.data[1];
          }
          console.log("Axios N Data Baseline");
          console.log(this.nutritionalData);
        }.bind(this)
        ).catch(
          function(error) {
            this.errors = error.response.data.errors;
          }.bind(this)
        );

    

  },
  methods: {
    updateUser: function(){
      axios
        .get("/users")
        .then(function(response) {
          console.log(response.data);
          this.currentUser = response.data.current_user;
        }.bind(this)
        ).catch(
          function(error) {
            this.errors = error.response.data.errors;
          }.bind(this)
        );
    },
    generateRandomSeed: function(APICall){
      var seed = Math.floor(Math.random()*Math.floor(100));
      if(seed > 50){
        seed = Math.floor(Math.random()*Math.floor(15));
        if (seed >= 10){
          seed = seed - 10;
        }
      }else{
        seed = Math.floor(Math.random()*Math.floor(10)) + Math.floor(Math.random()*Math.floor(10));
      }

      var api = APICall;
      //Todo: Check if overflow causes problems with the API 
      api += "&maxResult=1&start=" + seed;
      console.log(api)
      return api;
    },
    createRecipe: function(params){
      var recipeParams = {
        name: params.matches[0].recipeName,
        yumID: params.matches[0].id,
        image_url: params.matches[0].smallImageUrls[0]
      }
      axios
          .post("/recipes",recipeParams)
          .then(function(response) {
            console.log("Recipe Created")
            console.log(response.data);
          }.bind(this)
          ).catch(
            function(error) {
              this.errors = error.response.data.errors;
            }.bind(this)
          );
          this.updateUser();
    },
    sortNumber: function(a,b) {
    return a - b;
    },
    sortNutrtionalDebt: function(userNData, modifier,){
      var debtValues = [];
      var nKeys = {};
      for (var key in userNData){
        var recommended = this.nutritionalData[key];
        var current = userNData[key] * modifier
        var debt = recommended - current;
        if(debt > 0){
          debtValues.push(debt);
          nKeys[debt] = key;
        }
      }
      console.log("Pre Sorted DebtValues");
      console.log(debtValues);

      debtValues = debtValues.sort(this.sortNumber);
      var ret = {};
      //Logic: If seed > 2* length add top two debts and random other. If seed > length add top debt and random other. Otherwise add random debt.
      console.log("DebtValues");
      console.log(debtValues);

      var length = debtValues.length;
      var seed = Math.floor(Math.random()*Math.floor(length * 3));
      if (seed > length*2) {
        ret[nKeys[debtValues[length-2]]] = debtValues[length-2];
        console.log("seed>length*2");
        console.log(nKeys[debtValues[length-2]]);
      }
      if (seed > length){
        ret[nKeys[debtValues[length-1]]] = debtValues[length-1];
        console.log("seed>length");
        console.log(nKeys[debtValues[length-1]]);
      }

      var keySeed = Math.floor(Math.random()*Math.floor(length));
      ret[nKeys[debtValues[keySeed]]] = debtValues[keySeed];
      console.log(nKeys[debtValues[keySeed]]);

      
      console.log(nKeys);
      console.log("Seed: " + seed + " Length: " + length);
      console.log("Key Seed: " + keySeed);
      console.log("Return value");
      console.log(ret);
      return ret;




    },
    generate_recipe: function(){
      var APICall = "";
      //Nutritional Requirements
      //Get all past meal requirements. 
      //Get nutritional data needed
      //Calculate the percent of daily food inputted (Calorie based)
      // Any nutritional requirement that they are missing (50% or lower) add to the API call
   
      //Aggregate Past Meal Data
      var modifier = 1;
      for (var i = 0; i < this.currentUser.past_meals.length; i++) {
        for (var key in this.currentUser.past_meals[0]) {
          this.userNData[key] += this.currentUser.past_meals[i][key];
        }
      }

      //Get the Most Needed Nutritional Keys
      modifier = this.nutritionalData["enerc_kcal"]/this.userNData["enerc_kcal"];
      var sortedKeys = this.sortNutrtionalDebt(this.userNData, modifier)
      
      //Add most needed nutritional keys to API Call
        for (var key in sortedKeys){
          var recommended = this.nutritionalData[key];
          var current = this.userNData[key] * modifier
          var debt = recommended - current;
          min = (recommended-current)/4;
          if(min < 0){
            min = 0;
          }
          max = (recommended-(current/modifier));
          APICall += "&nutrition." + key.toUpperCase() +".min="+min+"&nutrition." + key.toUpperCase() + ".max="+max;
        }


        //Requirements Parsing
        for (var i = 0; i < this.currentUser.requirements.length; i++) {
          curRequirement = this.currentUser.requirements[i];
          if (curRequirement.tag == "allergy"){
            APICall += "&allowedAllergy[]=" + curRequirement.yummly_search;
          }else if (curRequirement.tag == "mealType"){
            APICall +="&allowedCourse[]=course" + curRequirement.yummly_search;
          }else if (curRequirement.tag == "diet"){
            APICall += "&allowedDiet[]=" + curRequirement.yummly_search;
          }
        }

        console.log(APICall);
        // Remove Extra Irrelevant Courses
        APICall += "&excludedCourse[]=course^course-Beverages"
        APICall += "&excludedCourse[]=course^course-Condiments and Sauces"
        APICall += "&excludedCourse[]=course^course-Cocktails"
        APICall += "&excludedCourse[]=course^course-Side Dishes"

        //Random Seed (Each page 1-10)
        APICall = this.generateRandomSeed(APICall);

        //Actually get the data

        var params = {
          apiCall: APICall
        }
        axios
          .get("http://localhost:3000/nutritional_data/recipe", {params: params} )
          .then(function(response) {
            console.log(response.data);
            this.createRecipe(response.data);
          }.bind(this)
          ).catch(
            function(error) {
              console.log(error);
              this.errors = error.response.data.errors;
            }.bind(this)
          );
      },
      delete_recipe: function(id){
        params = {
          id: id
        }
        axios.delete("http://localhost:3000/recipe", params).then(function(response){


        }.bind(this)).catch(function(error){
         console.log(error);
         this.errors = error.response.data.errors; 
        });
      }
  },

  computed: {}
};

var RecipeDetailPage = {
  template: "#recipe-detail-page",
  data: function() {
    return {
      currentUser: {username: "Loading", recipes: []},
      recipe: {},
      id: "",
      errors: []

    };
  },
  created: function() {
        this.id = this.$route.params["id"];
        console.log("ID:" + this.id);
        axios
        .get("/users")
        .then(function(response) {
          console.log(response.data);
          this.currentUser = response.data.current_user;
        }.bind(this)
        ).catch(
          function(error) {
            this.errors = error.response.data.errors;
          }.bind(this)
        );

        var params = {
          id: this.id
        }
        console.log(params);
        axios
        .get("http://localhost:3000/nutritional_data/recipe_details", {params: params})
        .then(function(response) {
          console.log(response.data);
          this.recipe = response.data;
        }.bind(this)
        ).catch(
          function(error) {
            this.errors = error.response.data.errors;
          }.bind(this)
        );
            

  },
  methods: {
    
  },
  computed: {}
};



var SignupPage = {
  template: "#signup-page",
  data: function() {
    return {
      username: "",
      email: "",
      password: "",
      passwordConfirmation: "",
      gender: "m",
      age: 18,
      errors: []
    };
  },
  methods: {
    submit: function() {
      var params = {
        username: this.username,
        email: this.email,
        password: this.password,
        password_confirmation: this.passwordConfirmation,
        gender: this.gender,
        age: this.age
      };
      axios
        .post("/users", params)
        .then(function(response) {
          router.push("/login");
        }.bind(this)
        ).catch(
          function(error) {
            this.errors = error.response.data.errors;
          }.bind(this)
        );
    }
  }
};

var LoginPage = {
  template: "#login-page",
  data: function() {
    return {
      email: "",
      password: "",
      errors: []
    };
  },
  methods: {
    submit: function() {
      var params = {
        auth: { email: this.email, password: this.password }
      };
      axios
        .post("/user_token", params)
        .then(function(response) {
          axios.defaults.headers.common["Authorization"] =
            "Bearer " + response.data.jwt;
          localStorage.setItem("jwt", response.data.jwt);
          router.push("/profile");
        })
        .catch(
          function(error) {
            this.errors = ["Invalid email or password."];
            this.email = "";
            this.password = "";
          }.bind(this)
        );
    }
  }
};




var LogoutPage = {
  created: function() {
    axios.defaults.headers.common["Authorization"] = undefined;
    localStorage.removeItem("jwt");
    router.push("/");
  }
};



var router = new VueRouter({
  routes: [
  { path: "/", component: HomePage },
  { path: "/about", component: AboutPage },
  { path: "/contact", component: ContactPage },
  { path: "/signup", component: SignupPage },
  { path: "/login", component: LoginPage },
  { path: "/logout", component: LogoutPage },
  { path: "/profile", component: ProfilePage },
  { path: "/add_past_meal", component: PastMealPage },
  { path: "/add_requirement", component: RequirementPage },
  { path: "/generate_recipe", component: RecipePage },
  { path: "/recipe_detail/:id", component: RecipeDetailPage}



  ],
  scrollBehavior: function(to, from, savedPosition) {
    return { x: 0, y: 0 };
  }
});

var app = new Vue({
  el: "#vue-app",
  router: router,
  created: function() {
    var jwt = localStorage.getItem("jwt");
    if (jwt) {
      axios.defaults.headers.common["Authorization"] = jwt;
    }
  }
});